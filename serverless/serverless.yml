service: Klayers-python37

frameworkVersion: "=1.40.0"

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'default'}
  region: ${file(../infra/terraform.tfvars.json):aws_region.${self:provider.stage}}
  profile: ${file(../infra/terraform.tfvars.json):aws_profile.${self:provider.stage}}
  versionFunctions: false
  logRetentionInDays: 1


custom:
  awsRegion: ${self:provider.region}

  # environment variables
  s3LayersName: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_layers}
  s3LayersArn: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_layers_arn}
  
  dbLayers: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_layers_table}
  dbLayersArn: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_layers_table_arn}

  dbReqs: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_requirements_table}
  dbReqsArn: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_requirements_table_arn}

  lambdaPrefix: ${ssm:/${self:service.name}/${self:provider.stage}/lambda_prefix}


functions:
  build:
    handler: build.main
    runtime: python3.7
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
    timeout: 120
    memorySize: 1024
    environment:
      BUCKET_NAME: ${self:custom.s3LayersName}
      REQS_DB: ${self:custom.dbReqs}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - s3:PutObject
      - s3:GetObject
      - s3:DeleteObject
      - s3:PutObjectAcl
      - s3:GetObjectAcl
      - s3:AbortMultipartUpload
      Resource: ${self:custom.s3LayersArn}/*
    - Effect: Allow
      Action:
      - s3:ListBucket
      Resource: ${self:custom.s3LayersArn}
  deploy:
    handler: deploy.main
    runtime: python3.7
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-boto3:2
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-packaging:1
    timeout: 600
    memorySize: 128
    environment:
      BUCKET_NAME: ${self:custom.s3LayersName}
      REQS_DB: ${self:custom.dbReqs}
      LAYERS_DB: ${self:custom.dbLayers}
      LAMBDA_PREFIX: ${self:custom.lambdaPrefix}
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        Resource: ${self:custom.dbLayersArn}
      - Effect: Allow
        Action:
        - lambda:AddLayerVersionPermission
        - lambda:GetLayerVersion
        Resource: "*"
      - Effect: Allow
        Action:
         - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: Allow
        Action:
        - s3:GetObject
        Resource: ${self:custom.s3LayersArn}/*
  check:
    handler: check.main
    runtime: python3.7
    layers:
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-packaging:1
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-requests:4
    timeout: 120
    memorySize: 128
    environment:
      LAYERS_DB: ${self:custom.dbLayers}
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        Resource: ${self:custom.dbLayersArn}

package:
  exclude:
    - package-lock.json
    - package.json
    - node_modules/**
    - serverless.yml
    - .gitignore
    - .serverless
